<?xml version="1.0" encoding="UTF-8"?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration monitorInterval="5">
    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

    <!--变量配置-->
    <Properties>
        <!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
        <!-- %logger{36} 表示 Logger 名字最长36个字符 -->
        <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36}.%M() %msg%n" />
        <!-- 定义日志存储的路径 -->
        <property name="FILE_PATH" value="logs" />
        <property name="FILE_NAME" value="itd-as" />
    </Properties>

    <appenders>
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
        </console>

        <!-- 这个会打印出所有系统日志的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="SystemLog" fileName="${FILE_PATH}/${FILE_NAME}/system/system.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}/system/history/%d{yyyy-MM-dd}_%i.log.gz"
                     append="true"
                     immediateFlush="true">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!-- 每天3点执行一次 -->
                <CronTriggeringPolicy schedule="0 0 3 * * ?"/>
                <SizeBasedTriggeringPolicy size="500MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="400">
                <Delete basePath="${FILE_PATH}/${FILE_NAME}/system/history" maxDepth="1">
                    <IfFileName glob="*.log.gz" />
                    <IfLastModified age="7d" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <!-- 这个会打印出所有业务日志的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="BusinessLog" fileName="${FILE_PATH}/${FILE_NAME}/business/business.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}/business/history/%d{yyyy-MM-dd}_%i.log.gz"
                     append="true"
                     immediateFlush="true">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!-- 每天3点执行一次 -->
                <CronTriggeringPolicy schedule="0 0 3 * * ?"/>
                <SizeBasedTriggeringPolicy size="500MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="400">
                <Delete basePath="${FILE_PATH}/${FILE_NAME}/business/history" maxDepth="1">
                    <IfFileName glob="*.log.gz" />
                    <IfLastModified age="7d" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <!-- 这个会打印出所有算法日志的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="AlgorithmLog" fileName="${FILE_PATH}/${FILE_NAME}/algorithm/algorithm.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}/algorithm/history/%d{yyyy-MM-dd}_%i.log.gz"
                     append="true"
                     immediateFlush="true">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!-- 每天3点执行一次 -->
                <CronTriggeringPolicy schedule="0 0 3 * * ?"/>
                <SizeBasedTriggeringPolicy size="500MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="400">
                <Delete basePath="${FILE_PATH}/${FILE_NAME}/algorithm/history" maxDepth="1">
                    <IfFileName glob="*.log.gz" />
                    <IfLastModified age="7d" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <!-- 这个会打印出所有内部接口日志的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="InternalLog" fileName="${FILE_PATH}/${FILE_NAME}/internal/internal.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}/internal/history/%d{yyyy-MM-dd}_%i.log.gz"
                     append="true"
                     immediateFlush="true">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!-- 每天3点执行一次 -->
                <CronTriggeringPolicy schedule="0 0 3 * * ?"/>
                <SizeBasedTriggeringPolicy size="500MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="400">
                <Delete basePath="${FILE_PATH}/${FILE_NAME}/internal/history" maxDepth="1">
                    <IfFileName glob="*.log.gz" />
                    <IfLastModified age="7d" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <!-- 这个会打印出所有外部接口日志的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="ExternalLog" fileName="${FILE_PATH}/${FILE_NAME}/external/external.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}/external/history/%d{yyyy-MM-dd}_%i.log.gz"
                     append="true"
                     immediateFlush="true">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!-- 每天3点执行一次 -->
                <CronTriggeringPolicy schedule="0 0 3 * * ?"/>
                <SizeBasedTriggeringPolicy size="500MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="400">
                <Delete basePath="${FILE_PATH}/${FILE_NAME}/external/history" maxDepth="1">
                    <IfFileName glob="*.log.gz" />
                    <IfLastModified age="7d" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
    </appenders>

    <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
    <!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--        <logger name="org.springframework" level="INFO"/>-->
        <logger name="org.mybatis" level="INFO"/>
        <!--指定算法参数日志-->
        <AsyncLogger name="com.tct.itd.common.interceptor.AsyncAlgParLogService" additivity="false"  includeLocation="true">
            <AppenderRef ref="AlgorithmLog" />
        </AsyncLogger>
        <!--指定业务日志-->
        <AsyncLogger name="com.tct.itd" additivity="true"  includeLocation="true">
            <AppenderRef ref="BusinessLog" />
        </AsyncLogger>
        <!--指定内部接口日志-->
        <AsyncLogger name="com.tct.itd.common.interceptor.AspectInternalLogService" additivity="false"  includeLocation="true">
            <AppenderRef ref="InternalLog" />
        </AsyncLogger>
        <!--指定外部接口日志-->
        <AsyncLogger name="com.tct.itd.common.interceptor.AspectExternalLogService" additivity="false"  includeLocation="true">
            <AppenderRef ref="ExternalLog" />
        </AsyncLogger>
        <!--指定内部接口日志-->
        <root level="all">
            <appender-ref ref="Console"/>
            <appender-ref ref="SystemLog"/>
        </root>
    </loggers>

</configuration>